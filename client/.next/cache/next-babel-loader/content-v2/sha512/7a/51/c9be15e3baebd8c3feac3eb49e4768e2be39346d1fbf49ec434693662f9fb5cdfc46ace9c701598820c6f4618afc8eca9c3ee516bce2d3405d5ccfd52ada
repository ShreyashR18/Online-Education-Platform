{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Shreyash\\\\Desktop\\\\temp code\\\\client\\\\pages\\\\instructor\\\\revenue.js\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../../context\";\nimport InstructorRoute from \"../../components/routes/InstructorRoute\";\nimport axios from \"axios\";\nimport { DollarOutlined, SettingOutlined, SyncOutlined } from \"@ant-design/icons\";\nimport { stripeCurrencyFormatter } from \"../../utils/helpers\";\n\nconst InstructorRevenue = () => {\n  const {\n    0: balance,\n    1: setBalance\n  } = useState({\n    pending: []\n  });\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    sendBalanceRequest();\n  }, []);\n\n  const sendBalanceRequest = async () => {\n    const {\n      data\n    } = await axios.get(\"/api/instructor/balance\");\n    setBalance(data);\n  };\n\n  const handlePayoutSettings = async () => {\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(\"/api/instructor/payout-settings\");\n      window.location.href = data;\n    } catch (err) {\n      setLoading(false);\n      console.log(err);\n      alert(\"Unable to access payout settings. Try later.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InstructorRoute, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row pt-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-8 offset-md-2 bg-light p-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Revenue report \", /*#__PURE__*/_jsxDEV(DollarOutlined, {\n              className: \"float-right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 30\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"You get paid directly from stripe to your bank account every 48 hour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Pending balance\", balance.pending && balance.pending.map((bp, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"float-right\",\n              children: stripeCurrencyFormatter(bp)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"For last 48 hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Payouts\", \" \", !loading ? /*#__PURE__*/_jsxDEV(SettingOutlined, {\n              className: \"float-right pointer\",\n              onClick: handlePayoutSettings\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(SyncOutlined, {\n              spin: true,\n              className: \"float-right pointer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Update your stripe account details or view previous payouts.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\nexport default InstructorRevenue;","map":{"version":3,"sources":["C:/Users/Shreyash/Desktop/temp code/client/pages/instructor/revenue.js"],"names":["useState","useEffect","useContext","Context","InstructorRoute","axios","DollarOutlined","SettingOutlined","SyncOutlined","stripeCurrencyFormatter","InstructorRevenue","balance","setBalance","pending","loading","setLoading","sendBalanceRequest","data","get","handlePayoutSettings","window","location","href","err","console","log","alert","map","bp","i"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { Context } from \"../../context\";\nimport InstructorRoute from \"../../components/routes/InstructorRoute\";\nimport axios from \"axios\";\nimport {\n  DollarOutlined,\n  SettingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport { stripeCurrencyFormatter } from \"../../utils/helpers\";\n\nconst InstructorRevenue = () => {\n  const [balance, setBalance] = useState({ pending: [] });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    sendBalanceRequest();\n  }, []);\n\n  const sendBalanceRequest = async () => {\n    const { data } = await axios.get(\"/api/instructor/balance\");\n    setBalance(data);\n  };\n\n  const handlePayoutSettings = async () => {\n    try {\n      setLoading(true);\n      const { data } = await axios.get(\"/api/instructor/payout-settings\");\n      window.location.href = data;\n    } catch (err) {\n      setLoading(false);\n      console.log(err);\n      alert(\"Unable to access payout settings. Try later.\");\n    }\n  };\n\n  return (\n    <InstructorRoute>\n      <div className=\"container\">\n        <div className=\"row pt-2\">\n          <div className=\"col-md-8 offset-md-2 bg-light p-5\">\n            <h2>\n              Revenue report <DollarOutlined className=\"float-right\" />{\" \"}\n            </h2>\n            <small>\n              You get paid directly from stripe to your bank account every 48\n              hour\n            </small>\n            <hr />\n            {/* {JSON.stringify(balance, null, 4)} */}\n            <h4>\n              Pending balance\n              {balance.pending &&\n                balance.pending.map((bp, i) => (\n                  <span key={i} className=\"float-right\">\n                    {stripeCurrencyFormatter(bp)}\n                  </span>\n                ))}\n            </h4>\n            <small>For last 48 hours</small>\n            <hr />\n            <h4>\n              Payouts{\" \"}\n              {!loading ? (\n                <SettingOutlined\n                  className=\"float-right pointer\"\n                  onClick={handlePayoutSettings}\n                />\n              ) : (\n                <SyncOutlined spin className=\"float-right pointer\" />\n              )}\n            </h4>\n            <small>\n              Update your stripe account details or view previous payouts.\n            </small>\n          </div>\n        </div>\n      </div>\n    </InstructorRoute>\n  );\n};\n\nexport default InstructorRevenue;\n"]},"metadata":{},"sourceType":"module"}